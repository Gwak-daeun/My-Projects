{"ast":null,"code":"import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from '../util/produce';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePosts: true,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    }\n  };\n};\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data); //리트윗된 게시글 메인포스트에 추가\n          break;\n        }\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = draft.mainPosts.length === 10;\n        break;\n      case LOAD_USER_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = []; //업로드 했는데 이미지 주소 남아있으면 안되니까 주소 초기화\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post2.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","faker","produce","initialState","mainPosts","imagePaths","singlePost","hasMorePosts","uploadImagesLoading","uploadImagesDone","uploadImagesError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","retweetLoading","retweetDone","retweetError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","filter","v","i","unshift","error","post","find","PostId","Likers","push","UserId","concat","length"],"sources":["C:/Users/내컴/Desktop/passionary/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\r\nimport faker from 'faker';\r\n\r\nimport produce from '../util/produce';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  singlePost: null,\r\n  hasMorePosts: true,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n});\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n      case RETWEET_REQUEST:\r\n      draft.retweetLoading = true;\r\n      draft.retweetDone = false;\r\n      draft.retweetError = null;\r\n      break;\r\n    case RETWEET_SUCCESS:{\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = true;\r\n      draft.mainPosts.unshift(action.data); //리트윗된 게시글 메인포스트에 추가\r\n      break;\r\n    }\r\n    case RETWEET_FAILURE:\r\n      draft.retweetLoading = false;\r\n      draft.retweetError = action.error;\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      draft.uploadImagesDone = false;\r\n      draft.uploadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS:{\r\n      draft.imagePaths = action.data;\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      break;\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS:{\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({id: action.data.UserId});\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostLoading = false;\r\n      draft.likePostError = action.error;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostLoading = true;\r\n      draft.unlikePostDone = false;\r\n      draft.unlikePostError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS:{\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostError = action.error;\r\n      break;\r\n      case LOAD_USER_POSTS_REQUEST:\r\n        case LOAD_POSTS_REQUEST:\r\n        case LOAD_HASHTAG_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n      case LOAD_USER_POSTS_SUCCESS:\r\n        case LOAD_HASHTAG_POSTS_SUCCESS:\r\n        case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.hasMorePosts = draft.mainPosts.length === 10;\r\n      break;\r\n      case LOAD_USER_POSTS_FAILURE:\r\n        case LOAD_HASHTAG_POSTS_FAILURE:\r\n        case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n      case LOAD_POST_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      draft.loadPostDone = false;\r\n      draft.loadPostError = null;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = true;\r\n      draft.singlePost = action.data;\r\n      \r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.imagePaths = []; //업로드 했는데 이미지 주소 남아있으면 안되니까 주소 초기화\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}