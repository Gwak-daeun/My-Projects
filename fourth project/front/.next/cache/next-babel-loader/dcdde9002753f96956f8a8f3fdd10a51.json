{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\\\uB0B4\\uCEF4\\\\Desktop\\\\fashionary\\\\front\\\\pages\\\\post\\\\[id].js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Button, Card, Col, Form, Input, Modal, Row, Select, Space, Switch, Tooltip, Upload } from 'antd';\nimport { EditOutlined, HeartOutlined, HeartTwoTone, UploadOutlined } from '@ant-design/icons';\nimport TextArea from \"antd/lib/input/TextArea\";\nimport AppLayout from '../../components/AppLayout';\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from '../../reducers/user';\nimport { LIKE_POST_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST, UPDATE_POST_REQUEST, UPLOAD_UPDATE_LOOK_IMAGE_REQUEST } from '../../reducers/post';\nimport { Router, useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport Look from '../look';\nimport NewComment from '../../components/newComment';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport Comments from '../../components/comments';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPenToSquare } from \"@fortawesome/free-regular-svg-icons\";\nimport { faHeartPulse } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHeartCrack } from '@fortawesome/free-solid-svg-icons';\nimport { faHouse } from '@fortawesome/free-solid-svg-icons';\nimport NoComments from '../../components/noComments';\nimport '../css/post[id].module.css';\nimport useInput from '../../hooks/useInput';\nvar Meta = Card.Meta;\nvar Option = Select.Option;\nimport styled from 'styled-components';\nimport patchInput from '../../hooks/patchInput';\nimport useSWR from 'swr';\nvar OneLook = styled.div.withConfig({\n  displayName: \"id__OneLook\",\n  componentId: \"sc-74jz14-0\"\n})([\".div1{width:1120px;position:relative;z-index:1;}.switch1{margin-left:900px;margin-top:36px;}.icon1{position:absolute;z-index:5;font-size:30px;margin-left:200px;margin-top:10px;}.icon2{position:absolute;z-index:5;font-size:30px;margin-left:243px;margin-top:10px;}.icon3{z-index:10;}.img1{margin-left:120px;margin-top:20px;height:330px;}.img2{height:550px;width:100%;}.button1{margin-left:384px;}.button2{background-color:black;color:white;margin-bottom:10px;}.button3{background-color:black;color:white;margin-bottom:10px;}.button4{margin-left:20%;margin-top:5px;background-color:black;color:white;}.button5{margin-left:10%;margin-top:5px;background-color:black;color:white;}.col1{float:left;}.card1{width:280px;z-index:1;}.card2{margin-left:15px;width:400px;}.card3{margin-top:24px;margin-left:15px;width:400px;height:245px;}.li1{display:inline-block;}.li2{display:inline-block;margin-left:10px;}.body1{text-align:center;}.input1{color:black;text-align:center;}.textArea1{height:110px;resize:none;margin-top:20px;}\"]);\nvar fetcher = function fetcher(url) {\n  return axios.get(url, {\n    withCredentials: true\n  }).then(function (result) {\n    return result.data;\n  });\n};\nvar Post = function Post() {\n  _s();\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var id = router.query.id;\n  var _useSelector = useSelector(function (state) {\n      return state.user;\n    }),\n    userCalendarData = _useSelector.userCalendarData,\n    followLoading = _useSelector.followLoading,\n    unfollowLoading = _useSelector.unfollowLoading;\n  var _useSelector2 = useSelector(function (state) {\n      return state.post;\n    }),\n    imagePaths = _useSelector2.imagePaths,\n    retweetError = _useSelector2.retweetError,\n    retweetDone = _useSelector2.retweetDone,\n    updatePostDone = _useSelector2.updatePostDone;\n  var _useState = useState(true),\n    read = _useState[0],\n    setRead = _useState[1];\n  var _useState2 = useState(null),\n    previewImg = _useState2[0],\n    setPreviewImg = _useState2[1];\n  var _useSWR = useSWR(\"http://localhost:3065/post/\".concat(id), fetcher),\n    singlePost = _useSWR.data,\n    singlePostError = _useSWR.error;\n  var _useSWR2 = useSWR(\"http://localhost:3065/user\", fetcher),\n    me = _useSWR2.data,\n    error = _useSWR2.error;\n  useEffect(function () {\n    if (me.id === singlePost.UserId) {\n      setRead(false);\n    }\n  }, [me && me.id]);\n  console.log(singlePost);\n\n  //     const [content, setContent] = useState(singlePost.content);\n\n  //     const onChangeContent = useCallback((e) => {\n  //         const value = e.target.value;\n  //         setContent((content) => {\n  //           if (typeof value === 'object') {\n  //             return JSON.stringify(value);\n  //           } else {\n  //             return value;\n  //           }\n  //         });\n  //       }, []);\n\n  //     const [top, setTop] = useState(singlePost.top);\n\n  //     const onChangeTop = useCallback((e) => {\n  //         const value = e.target.value;\n  //         setTop((top) => {\n  //           if (typeof value === 'object') {\n  //             return JSON.stringify(value);\n  //           } else {\n  //             return value;\n  //           }\n  //         });\n  //       }, []);\n\n  //       const [bottom, setBottom] = useState(singlePost.bottom);\n\n  //       const onChangeBottom = useCallback((e) => {\n  //           const value = e.target.value;\n  //           setBottom((bottom) => {\n  //             if (typeof value === 'object') {\n  //               return JSON.stringify(value);\n  //             } else {\n  //               return value;\n  //             }\n  //           });\n  //         }, []);\n\n  //         const [dress, setDress] = useState(singlePost.dress);\n\n  //         const onChangeDress = useCallback((e) => {\n  //             const value = e.target.value;\n  //             setDress((dress) => {\n  //               if (typeof value === 'object') {\n  //                 return JSON.stringify(value);\n  //               } else {\n  //                 return value;\n  //               }\n  //             });\n  //           }, []);\n\n  //           const [shoes, setShoes] = useState(singlePost.shoes);\n\n  //           const onChangeShoes = useCallback((e) => {\n  //               const value = e.target.value;\n  //               setShoes((shoes) => {\n  //                 if (typeof value === 'object') {\n  //                   return JSON.stringify(value);\n  //                 } else {\n  //                   return value;\n  //                 }\n  //               });\n  //             }, []);\n\n  //             const [acc, setAcc] = useState(singlePost.acc);\n\n  //             const onChangeAcc = useCallback((e) => {\n  //                 const value = e.target.value;\n  //                 setAcc((acc) => {\n  //                   if (typeof value === 'object') {\n  //                     return JSON.stringify(value);\n  //                   } else {\n  //                     return value;\n  //                   }\n  //                 });\n  //               }, []);\n\n  //               const [outer, setOuter] = useState(singlePost.outer);\n\n  //               const onChangeOuter = useCallback((e) => {\n  //                   const value = e.target.value;\n  //                   setOuter((outer) => {\n  //                     if (typeof value === 'object') {\n  //                       return JSON.stringify(value);\n  //                     } else {\n  //                       return value;\n  //                     }\n  //                   });\n  //                 }, []);\n\n  //                 const [lookName, setLookName] = useState(singlePost.lookName);\n\n  //                 const onChangeLookName = useCallback((e) => {\n  //                     const value = e.target.value;\n  //                     setLookName((lookName) => {\n  //                       if (typeof value === 'object') {\n  //                         return JSON.stringify(value);\n  //                       } else {\n  //                         return value;\n  //                       }\n  //                     });\n  //                   }, []);\n\n  //     const imageInput = useRef();\n\n  //     const [index, setIndex] = useState(true);\n\n  //     const [isModalOpen, setIsModalOpen] = useState(false);\n\n  //     console.log(\"singlePost::::: \", singlePost);\n\n  //     console.log(\"me::::::\", me);\n\n  //     const liked = singlePost?.Likers[0];\n\n  //     const isFollowing = me?.Followings.find((v) => v.id === singlePost.UserId);\n\n  //     console.log(\"좋아요: \", liked);\n\n  //     const tags = [];\n\n  //     //해시태그 #붙여서 뿌리기\n  //     for(let i = 0; i < singlePost.Hashtags.length; i++){\n\n  //         if(singlePost.Hashtags !== undefined){\n  //             tags.push( \"#\" + singlePost.Hashtags[i].name );\n  //         }\n  //     }\n\n  //     console.log(\"해시태그: \", tags);\n\n  //     //댓글 쓰기, 보기 선택\n  //     const onSelect = () => {\n  //         setIndex(!index);\n  //         console.log(\"index: \", index);\n  //       };\n\n  //       //리트윗 에러\n  //       useEffect(() => {\n  //         if(retweetError){\n  //             window.alert(retweetError);\n  //         }\n  //       },[retweetError]);\n\n  //       //좋아요\n  //       const onLike = useCallback(() => {\n  //         if(!id){\n  //             return alert('로그인이 필요합니다.');\n  //         }\n  //        return dispatch({\n  //                 type: LIKE_POST_REQUEST,\n  //                 data: id\n  //             });\n  //         },[id]);\n\n  //         //좋아요 취소\n  //         const onUnlike = useCallback(() => {\n  //             if(!id){\n  //                 return alert('로그인이 필요합니다.');\n  //             }\n  //             return dispatch({\n  //             type: UNLIKE_POST_REQUEST,\n  //             data: id\n  //            });\n  //         },[id]);\n\n  //         //팔로우\n  //         const onClickButton = useCallback(() => {\n  //             if(isFollowing){\n  //                 dispatch({\n  //                     type: UNFOLLOW_REQUEST,\n  //                     data: singlePost.UserId\n  //                 }, window.alert(\"언팔로우 합니다.\"));\n  //             }\n  //             else{\n  //                 dispatch({\n  //                     type: FOLLOW_REQUEST,\n  //                     data: singlePost.UserId\n  //                 }, window.alert(\"팔로우 합니다.\"));\n  //             }\n  //         },[isFollowing]);\n\n  //         //리트윗모달\n  //         const retweetModal = () => {\n  //             if(!id){\n  //                 return alert('로그인이 필요합니다.');\n  //             }\n  //             setIsModalOpen(true);\n  //         };\n\n  //         //리트윗\n  //         const retweetSubmit = useCallback(() => {\n  //             const formData = new FormData();\n\n  //             formData.append('content', content);\n  //             formData.append('postId', singlePost.id);\n\n  //             dispatch({\n  //                 type: RETWEET_REQUEST,\n  //                 data: formData\n  //             },\n  //             router.reload());\n  //         }, [content]);\n\n  //         //리트윗 모달 창 닫기\n  //         const handleCancel = () => {\n  //             setIsModalOpen(false);\n  //           };\n\n  //     //댓글 없을 때\n  //     const IfComments = () => {\n  //         if(index === false){\n  //             if(singlePost.Comments.length === 0){\n  //                 return (\n  //                     <NoComments />\n  //                 );\n  //             }else{\n  //                 <Comments post={singlePost} />\n  //             }\n  //         }else{\n  //             return(\n  //                 null\n  //             );\n  //         }\n  //     };\n\n  //     const onClickImageUpload = useCallback(() => {\n  //         imageInput.current.click();\n  //     }, [imageInput.current]);\n\n  // //게시글 수정 요청\n  //     const onSubmit = useCallback(() => {\n\n  //         const formData = new FormData();\n  //         imagePaths.forEach((p) => {\n  //             formData.append('image', p);\n  //         });\n  //         formData.append('content', content);\n  //         formData.append('top', top);\n  //         formData.append('bottom', bottom);\n  //         formData.append('dress', dress);\n  //         formData.append('shoes', shoes);\n  //         formData.append('acc', acc);\n  //         formData.append('outer', outer);\n  //         formData.append('lookName', lookName);\n  //         formData.append('postId', id);\n  //         dispatch({\n  //             type: UPDATE_POST_REQUEST,\n  //             data: formData,\n  //          });\n\n  //     },[content, imagePaths]);\n\n  //     //이미지 미리보기\n  //     const onChangeImages = useCallback((e) => {\n\n  //         const reader = new FileReader();\n  //         if(e.target.files[0]){\n  //           reader.readAsDataURL(e.target.files[0]);\n  //         }\n  //         reader.onloadend = () => {\n  //           const previewImgUrl = reader.result;\n  //           if(previewImgUrl){\n  //             setPreviewImg(previewImgUrl);\n  //           }\n  //         }\n  //         const imageFormData = new FormData();\n\n  //         [].forEach.call(e.target.files, (f) => {\n  //           imageFormData.append('image', f);\n  //       });\n\n  //        return dispatch({\n  //             type: UPLOAD_UPDATE_LOOK_IMAGE_REQUEST,\n  //             data: imageFormData\n  //         });\n\n  //     });\n\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 1\n    }\n  }));\n};\n_s(Post, \"v9f5Qr+D1KsWgmQEiMqYQJCMbqo=\", false, function () {\n  return [useDispatch, useRouter, useSelector, useSelector, useSWR, useSWR];\n});\n_c = Post;\nexport var __N_SSP = true;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["Button","Card","Col","Form","Input","Modal","Row","Select","Space","Switch","Tooltip","Upload","EditOutlined","HeartOutlined","HeartTwoTone","UploadOutlined","TextArea","AppLayout","FOLLOW_REQUEST","UNFOLLOW_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","UNLIKE_POST_REQUEST","UPDATE_POST_REQUEST","UPLOAD_UPDATE_LOOK_IMAGE_REQUEST","Router","useRouter","useDispatch","useSelector","axios","Look","NewComment","useCallback","useEffect","useRef","useState","Comments","FontAwesomeIcon","faPenToSquare","faHeartPulse","faHeartCrack","faHouse","NoComments","useInput","Meta","Option","styled","patchInput","useSWR","OneLook","div","fetcher","url","get","withCredentials","then","result","data","Post","dispatch","router","id","query","state","user","userCalendarData","followLoading","unfollowLoading","post","imagePaths","retweetError","retweetDone","updatePostDone","read","setRead","previewImg","setPreviewImg","singlePost","singlePostError","error","me","UserId","console","log"],"sources":["C:/Users/내컴/Desktop/fashionary/front/pages/post/[id].js"],"sourcesContent":["\r\nimport { Button, Card, Col, Form, Input, Modal, Row, Select, Space, Switch, Tooltip, Upload  } from 'antd';\r\nimport { EditOutlined, HeartOutlined, HeartTwoTone, UploadOutlined  } from '@ant-design/icons';\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport AppLayout from '../../components/AppLayout';\r\nimport { FOLLOW_REQUEST, LOAD_MY_INFO_REQUEST, UNFOLLOW_REQUEST } from '../../reducers/user';\r\nimport { LIKE_POST_REQUEST, LOAD_POST_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST, UPDATE_POST_REQUEST, UPLOAD_UPDATE_LOOK_IMAGE_REQUEST } from '../../reducers/post';\r\nimport wrapper from '../../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport { Router, useRouter } from 'next/router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport Look from '../look';\r\nimport NewComment from '../../components/newComment';\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\nimport Comments from '../../components/comments';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPenToSquare} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {faHeartPulse} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faHeartCrack } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHouse } from '@fortawesome/free-solid-svg-icons';\r\nimport NoComments from '../../components/noComments';\r\nimport '../css/post[id].module.css';\r\nimport useInput from '../../hooks/useInput';\r\nconst { Meta } = Card;\r\nconst { Option } = Select;\r\nimport styled from 'styled-components';\r\nimport patchInput from '../../hooks/patchInput';\r\nimport useSWR from 'swr';\r\nconst OneLook = styled.div`\r\n\r\n    .div1{\r\n        width: 1120px;\r\n        position: relative;\r\n        z-index: 1;\r\n    }\r\n    .switch1{\r\n        margin-left: 900px;\r\n        margin-top: 36px;\r\n    }\r\n    .icon1{\r\n        position: absolute;\r\n        z-index: 5;\r\n        font-size: 30px;\r\n        margin-left: 200px;\r\n        margin-top: 10px;\r\n    }\r\n    .icon2{\r\n        position: absolute;\r\n        z-index: 5;\r\n        font-size: 30px;\r\n        margin-left: 243px;\r\n        margin-top: 10px;\r\n    }\r\n    .icon3{\r\n        z-index:10;\r\n    }\r\n    .img1{\r\n        margin-left: 120px;\r\n        margin-top: 20px;\r\n        height: 330px;\r\n    }\r\n    .img2{\r\n        height: 550px;\r\n        width: 100%;\r\n    }\r\n    .button1{\r\n        margin-left: 384px;\r\n    }\r\n    .button2{\r\n        background-color: black;\r\n        color: white;\r\n        margin-bottom: 10px;\r\n    }\r\n    .button3{\r\n        background-color: black;\r\n        color: white;\r\n        margin-bottom: 10px;\r\n    }\r\n    .button4{\r\n        margin-left: 20%;\r\n        margin-top: 5px; \r\n        background-color: black;\r\n        color: white;\r\n    }\r\n    .button5{\r\n       margin-left: 10%;\r\n        margin-top: 5px;\r\n        background-color: black;\r\n        color: white;\r\n    }\r\n    .col1{\r\n        float: left;\r\n    }\r\n    .card1{\r\n        width: 280px;\r\n        z-index: 1;\r\n    }\r\n    .card2{\r\n        margin-left: 15px;\r\n        width: 400px;\r\n    }\r\n    .card3{\r\n        margin-top: 24px; \r\n        margin-left: 15px;\r\n        width: 400px;\r\n        height: 245px;\r\n    }\r\n    .li1{\r\n        display: inline-block;\r\n    }\r\n    .li2{\r\n        display: inline-block;\r\n        margin-left: 10px;\r\n    }\r\n    .body1{\r\n        text-align: center;\r\n    }\r\n    .input1{\r\n        color: black;\r\n        text-align: center;\r\n    }\r\n    .textArea1{\r\n        height: 110px;\r\n        resize: none;\r\n        margin-top: 20px;\r\n    }\r\n`;\r\n\r\nconst fetcher = (url) => axios.get(url, {withCredentials: true}).then((result) => result.data);\r\n\r\nconst Post = () => {\r\n\r\n\r\n \r\n    const dispatch = useDispatch();\r\n    const router = useRouter();\r\n    const {id} = router.query;\r\n    const {userCalendarData, followLoading, unfollowLoading} = useSelector((state) => state.user);\r\n    const {imagePaths, retweetError, retweetDone, updatePostDone} = useSelector((state) => state.post);\r\n    const [read, setRead] = useState(true);\r\n    const [previewImg, setPreviewImg] = useState(null);\r\n\r\n    const {data: singlePost, error: singlePostError} = useSWR(`http://localhost:3065/post/${id}`, fetcher);\r\n    const {data: me, error} = useSWR(`http://localhost:3065/user`, fetcher);\r\n\r\n    useEffect(() => {\r\n        if(me.id === singlePost.UserId){\r\n            setRead(false);\r\n        }\r\n\r\n    }, [me && me.id]);\r\n\r\n    console.log(singlePost);\r\n\r\n\r\n//     const [content, setContent] = useState(singlePost.content);\r\n\r\n//     const onChangeContent = useCallback((e) => {\r\n//         const value = e.target.value;\r\n//         setContent((content) => {\r\n//           if (typeof value === 'object') {\r\n//             return JSON.stringify(value);\r\n//           } else {\r\n//             return value;\r\n//           }\r\n//         });\r\n//       }, []);\r\n\r\n//     const [top, setTop] = useState(singlePost.top);\r\n\r\n//     const onChangeTop = useCallback((e) => {\r\n//         const value = e.target.value;\r\n//         setTop((top) => {\r\n//           if (typeof value === 'object') {\r\n//             return JSON.stringify(value);\r\n//           } else {\r\n//             return value;\r\n//           }\r\n//         });\r\n//       }, []);\r\n\r\n//       const [bottom, setBottom] = useState(singlePost.bottom);\r\n    \r\n//       const onChangeBottom = useCallback((e) => {\r\n//           const value = e.target.value;\r\n//           setBottom((bottom) => {\r\n//             if (typeof value === 'object') {\r\n//               return JSON.stringify(value);\r\n//             } else {\r\n//               return value;\r\n//             }\r\n//           });\r\n//         }, []);\r\n\r\n//         const [dress, setDress] = useState(singlePost.dress);\r\n    \r\n//         const onChangeDress = useCallback((e) => {\r\n//             const value = e.target.value;\r\n//             setDress((dress) => {\r\n//               if (typeof value === 'object') {\r\n//                 return JSON.stringify(value);\r\n//               } else {\r\n//                 return value;\r\n//               }\r\n//             });\r\n//           }, []);\r\n\r\n//           const [shoes, setShoes] = useState(singlePost.shoes);\r\n    \r\n//           const onChangeShoes = useCallback((e) => {\r\n//               const value = e.target.value;\r\n//               setShoes((shoes) => {\r\n//                 if (typeof value === 'object') {\r\n//                   return JSON.stringify(value);\r\n//                 } else {\r\n//                   return value;\r\n//                 }\r\n//               });\r\n//             }, []);\r\n\r\n//             const [acc, setAcc] = useState(singlePost.acc);\r\n    \r\n//             const onChangeAcc = useCallback((e) => {\r\n//                 const value = e.target.value;\r\n//                 setAcc((acc) => {\r\n//                   if (typeof value === 'object') {\r\n//                     return JSON.stringify(value);\r\n//                   } else {\r\n//                     return value;\r\n//                   }\r\n//                 });\r\n//               }, []);\r\n\r\n//               const [outer, setOuter] = useState(singlePost.outer);\r\n    \r\n//               const onChangeOuter = useCallback((e) => {\r\n//                   const value = e.target.value;\r\n//                   setOuter((outer) => {\r\n//                     if (typeof value === 'object') {\r\n//                       return JSON.stringify(value);\r\n//                     } else {\r\n//                       return value;\r\n//                     }\r\n//                   });\r\n//                 }, []);\r\n\r\n//                 const [lookName, setLookName] = useState(singlePost.lookName);\r\n    \r\n//                 const onChangeLookName = useCallback((e) => {\r\n//                     const value = e.target.value;\r\n//                     setLookName((lookName) => {\r\n//                       if (typeof value === 'object') {\r\n//                         return JSON.stringify(value);\r\n//                       } else {\r\n//                         return value;\r\n//                       }\r\n//                     });\r\n//                   }, []);\r\n\r\n//     const imageInput = useRef();\r\n\r\n\r\n\r\n//     const [index, setIndex] = useState(true);\r\n\r\n//     const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n//     console.log(\"singlePost::::: \", singlePost);\r\n\r\n//     console.log(\"me::::::\", me);\r\n\r\n//     const liked = singlePost?.Likers[0];\r\n\r\n//     const isFollowing = me?.Followings.find((v) => v.id === singlePost.UserId);\r\n\r\n//     console.log(\"좋아요: \", liked);\r\n\r\n//     const tags = [];\r\n\r\n//     //해시태그 #붙여서 뿌리기\r\n//     for(let i = 0; i < singlePost.Hashtags.length; i++){\r\n        \r\n//         if(singlePost.Hashtags !== undefined){\r\n//             tags.push( \"#\" + singlePost.Hashtags[i].name );\r\n//         }\r\n//     }\r\n\r\n//     console.log(\"해시태그: \", tags);\r\n\r\n//     //댓글 쓰기, 보기 선택\r\n//     const onSelect = () => {\r\n//         setIndex(!index);\r\n//         console.log(\"index: \", index);\r\n//       };\r\n\r\n//       //리트윗 에러\r\n//       useEffect(() => {\r\n//         if(retweetError){\r\n//             window.alert(retweetError);\r\n//         }\r\n//       },[retweetError]);\r\n\r\n//       //좋아요\r\n//       const onLike = useCallback(() => {\r\n//         if(!id){\r\n//             return alert('로그인이 필요합니다.');\r\n//         }\r\n//        return dispatch({\r\n//                 type: LIKE_POST_REQUEST,\r\n//                 data: id\r\n//             });\r\n//         },[id]);\r\n\r\n//         //좋아요 취소\r\n//         const onUnlike = useCallback(() => {\r\n//             if(!id){\r\n//                 return alert('로그인이 필요합니다.');\r\n//             }\r\n//             return dispatch({\r\n//             type: UNLIKE_POST_REQUEST,\r\n//             data: id\r\n//            });\r\n//         },[id]);\r\n\r\n//         //팔로우\r\n//         const onClickButton = useCallback(() => {\r\n//             if(isFollowing){\r\n//                 dispatch({\r\n//                     type: UNFOLLOW_REQUEST,\r\n//                     data: singlePost.UserId\r\n//                 }, window.alert(\"언팔로우 합니다.\"));\r\n//             }\r\n//             else{\r\n//                 dispatch({\r\n//                     type: FOLLOW_REQUEST,\r\n//                     data: singlePost.UserId\r\n//                 }, window.alert(\"팔로우 합니다.\"));\r\n//             }\r\n//         },[isFollowing]);\r\n\r\n//         //리트윗모달\r\n//         const retweetModal = () => {\r\n//             if(!id){\r\n//                 return alert('로그인이 필요합니다.');\r\n//             }\r\n//             setIsModalOpen(true);\r\n//         };\r\n\r\n//         //리트윗\r\n//         const retweetSubmit = useCallback(() => {\r\n//             const formData = new FormData();\r\n\r\n//             formData.append('content', content);\r\n//             formData.append('postId', singlePost.id);\r\n\r\n//             dispatch({\r\n//                 type: RETWEET_REQUEST,\r\n//                 data: formData\r\n//             },\r\n//             router.reload());\r\n//         }, [content]);\r\n        \r\n//         //리트윗 모달 창 닫기\r\n//         const handleCancel = () => {\r\n//             setIsModalOpen(false);\r\n//           };\r\n\r\n//     //댓글 없을 때\r\n//     const IfComments = () => {\r\n//         if(index === false){\r\n//             if(singlePost.Comments.length === 0){\r\n//                 return (\r\n//                     <NoComments />\r\n//                 );\r\n//             }else{\r\n//                 <Comments post={singlePost} />\r\n//             }\r\n//         }else{\r\n//             return(\r\n//                 null\r\n//             );\r\n//         }\r\n//     };\r\n\r\n//     const onClickImageUpload = useCallback(() => {\r\n//         imageInput.current.click();\r\n//     }, [imageInput.current]);\r\n\r\n\r\n// //게시글 수정 요청\r\n//     const onSubmit = useCallback(() => {\r\n\r\n//         const formData = new FormData();\r\n//         imagePaths.forEach((p) => {\r\n//             formData.append('image', p);\r\n//         });\r\n//         formData.append('content', content);\r\n//         formData.append('top', top);\r\n//         formData.append('bottom', bottom);\r\n//         formData.append('dress', dress);\r\n//         formData.append('shoes', shoes);\r\n//         formData.append('acc', acc);\r\n//         formData.append('outer', outer);\r\n//         formData.append('lookName', lookName);\r\n//         formData.append('postId', id);\r\n//         dispatch({\r\n//             type: UPDATE_POST_REQUEST,\r\n//             data: formData,\r\n//          });\r\n        \r\n//     },[content, imagePaths]);\r\n\r\n//     //이미지 미리보기\r\n//     const onChangeImages = useCallback((e) => {\r\n    \r\n//         const reader = new FileReader();\r\n//         if(e.target.files[0]){\r\n//           reader.readAsDataURL(e.target.files[0]);\r\n//         }\r\n//         reader.onloadend = () => {\r\n//           const previewImgUrl = reader.result;\r\n//           if(previewImgUrl){\r\n//             setPreviewImg(previewImgUrl);\r\n//           }\r\n//         }\r\n//         const imageFormData = new FormData();\r\n   \r\n//         [].forEach.call(e.target.files, (f) => {\r\n//           imageFormData.append('image', f);\r\n//       });\r\n    \r\n//        return dispatch({\r\n//             type: UPLOAD_UPDATE_LOOK_IMAGE_REQUEST,\r\n//             data: imageFormData\r\n//         });\r\n\r\n//     });\r\n\r\n\r\n    return(\r\n        <AppLayout >\r\n            {/* <OneLook>\r\n            <Form encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n        <div className='div1'>\r\n       <Row>\r\n        <h1>DailyLook</h1>\r\n        <Switch defaultChecked={index} onChange={onSelect} className='switch1' checkedChildren=\"댓글쓰기\" unCheckedChildren=\"댓글보기\" />\r\n       </Row>\r\n       {me.id === singlePost.UserId \r\n            ?\r\n            null\r\n            :\r\n            <OneLook>\r\n            <Tooltip title=\"내 계정에 인용하기\">\r\n            <FontAwesomeIcon \r\n                    className='icon1'\r\n                    icon={faPenToSquare} \r\n                    onClick={retweetModal}\r\n            \r\n            />\r\n            </Tooltip>\r\n            </OneLook>\r\n       }\r\n      \r\n            <Modal title=\"인용하기\" footer={null} onCancel={handleCancel} open={isModalOpen} >\r\n                <Form  onFinish={retweetSubmit}>\r\n                    <Input.TextArea \r\n                    value={content}\r\n                    onChange={onChangeContent}\r\n                    maxLength={200}\r\n                    placeholder=\"인용 메모를 남겨보세요.\"\r\n                    />\r\n                  <OneLook> <img className='img1' src={`http://localhost:3065/${singlePost.Images[0]?.src}`} /> </OneLook>\r\n                    <Button className='button1' htmlType=\"submit\">인용하기</Button>\r\n                </Form>\r\n            </Modal>\r\n\r\n        {liked ? \r\n        <OneLook>\r\n        <Tooltip title=\"좋아요 취소\">\r\n        <HeartTwoTone onClick={onUnlike} twoToneColor=\"#fc83c6\" className='icon2'/> \r\n        </Tooltip>\r\n        </OneLook>\r\n        :\r\n        <OneLook> \r\n        <Tooltip title=\"좋아요\">\r\n        <HeartOutlined onClick={onLike} className='icon2' />\r\n        </Tooltip>\r\n        </OneLook>\r\n        }\r\n\r\n            <Col className='col1' >\r\n            <input name=\"image\" type=\"file\" hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Card\r\n                className='card1'\r\n                \r\n                cover={<OneLook><img className='img2' alt=\"example\" src={ previewImg ? previewImg : `http://localhost:3065/${singlePost.Images[0]?.src}`} /></OneLook>}\r\n                actions={\r\n                    id && singlePost.UserId === me.id\r\n                    ? \r\n                    [\r\n                    <Tooltip title=\"이미지 수정\">      \r\n                    <Button onClick={onClickImageUpload} >      \r\n                    <UploadOutlined key=\"upload\"/>\r\n                    </Button>\r\n                    </Tooltip>   \r\n                    ]\r\n                    :\r\n                   [ \r\n                   <OneLook>\r\n                    {isFollowing\r\n                    ?\r\n                    <Tooltip title='언팔로우'>\r\n                        <FontAwesomeIcon\r\n                        icon={faHeartCrack}\r\n                        fontSize={20}\r\n                        onClick={onClickButton}\r\n                        className='icon3'\r\n                        />\r\n                    </Tooltip>\r\n                    :\r\n                    <Tooltip title={isFollowing ? '언팔로우' : '팔로우'}>\r\n                        <FontAwesomeIcon\r\n                        icon={faHeartPulse}\r\n                        fontSize={20}\r\n                        onClick={onClickButton}\r\n                        className='icon3'\r\n                        key='unfollow'\r\n                        />\r\n                    </Tooltip>\r\n                    }\r\n                    </OneLook>\r\n                    ,\r\n                    <OneLook>\r\n                    <Tooltip title={singlePost.User.nickname + \"의 홈 방문하기\"}>\r\n                        <a href={`http://localhost:3000/user/${singlePost.UserId}`}>\r\n                        <FontAwesomeIcon\r\n                         icon={faHouse} \r\n                         fontSize={20}\r\n                         className='icon3'\r\n                         key='home'\r\n                         />\r\n                        </a>\r\n                    </Tooltip>\r\n                    </OneLook>\r\n                    ]\r\n                }\r\n                >      \r\n                <Meta title={\"글쓴이:  \" + singlePost.User.nickname} />\r\n                </Card>\r\n                <h1>This look is...{singlePost.rateAverage}points.</h1>\r\n            </Col>\r\n        <Col style={{float: 'left', width:500}}>\r\n        <div>\r\n            <ul>\r\n            <li className='li1'><h3 >데일리룩 제목</h3></li>\r\n            <li className='li2'><Input name='lookname' readOnly={read} value={lookName} onChange={onChangeLookName}  /></li>\r\n            </ul>\r\n\r\n            </div>\r\n            <div>\r\n            <Card className='card2'>\r\n            <Button className='button2' block >Information</Button>\r\n<thead>\r\n    <tr >\r\n    <th>분류</th>\r\n    <th>브랜드명</th>\r\n    \r\n    </tr>\r\n</thead>\r\n<tbody className='body1' >\r\n    <tr>\r\n    <td> <Input disabled defaultValue=\"상의\" className='input1' /></td>\r\n    <td> <Input name='top' value={top} readOnly={read} onChange={onChangeTop}  type=\"text\"  /></td> \r\n    </tr>\r\n\r\n    <tr>\r\n    <td> <Input disabled  defaultValue=\"하의\" className='input1' /></td>\r\n    <td> <Input  value={bottom} readOnly={read} onChange={onChangeBottom} type=\"text\" /></td> \r\n    </tr>\r\n\r\n    <tr>\r\n    <td> <Input disabled  defaultValue=\"원피스\" className='input1' /></td>\r\n    <td> <Input  value={dress} readOnly={read} onChange={onChangeDress} type=\"text\" /></td> \r\n    </tr>\r\n\r\n    <tr>\r\n    <td> <Input disabled  defaultValue=\"아우터\" className='input1' /></td>\r\n    <td> <Input  value={outer} readOnly={read} onChange={onChangeOuter} type=\"text\" /></td> \r\n    </tr>\r\n\r\n    <tr>\r\n    <td> <Input disabled  defaultValue=\"신발\" className='input1' /></td>\r\n    <td> <Input value={shoes} readOnly={read} onChange={onChangeShoes}  type=\"text\" /></td> \r\n    </tr>\r\n\r\n    <tr>\r\n    <td> <Input disabled  defaultValue=\"패션잡화\" className='input1' /></td>\r\n    <td> <Input value={acc} readOnly={read}  onChange={onChangeAcc}  type=\"text\" /></td> \r\n    </tr>\r\n\r\n</tbody>\r\n</Card>\r\n</div>\r\n<Card className='card3'>\r\n<Button className='button3' block >Daily Record </Button>\r\n<h4>해시태그: {tags}</h4>\r\n<TextArea\r\n  onChange={onChangeContent}\r\n  showCount\r\n  maxLength={250}\r\n  value={content} \r\n  readOnly={read}\r\n  className='textArea1'\r\n/>\r\n\r\n</Card>\r\n    { id && singlePost.UserId === me.id\r\n    ?\r\n        (\r\n            <>\r\n            <OneLook>\r\n            <Button \r\n            className='button4'>\r\n                삭제하기\r\n            </Button>\r\n            <Button\r\n            className='button5'\r\n            htmlType='submit'\r\n            >\r\n                수정하기\r\n            </Button>\r\n            </OneLook>\r\n            </>\r\n        )\r\n        :\r\n        null\r\n    }\r\n\r\n\r\n\r\n</Col>\r\n\r\n</div>\r\n</Form>\r\n</OneLook> */}\r\n\r\n{/* 댓글 */}\r\n<Col>\r\n    {/* {index === true  ? <NewComment post={singlePost} /> : null }\r\n    {index === false  ? ( singlePost.Comments.length !== 0 ? <Comments post={singlePost} /> : <NoComments />) : null }\r\n    <IfComments /> */}\r\n</Col>\r\n\r\n    </AppLayout>\r\n    );\r\n\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async(context) => { \r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = ''; \r\n    if(context.req && cookie){ \r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n   context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.params.id //혹은 context.query.id\r\n    });\r\n   context.store.dispatch(END);\r\n   await context.store.sagaTask.toPromise();\r\n});\r\n\r\n\r\nexport default Post;"],"mappings":"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A;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAIA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAGA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAGI,OACI,MAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAgNlB,MAAC,GAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAIE,CAEU;AAGhB,CAAC;AAAC,GA/gBInB,IAAI;EAAA,QAIW/B,WAAW,EACbD,SAAS,EAEmCE,WAAW,EACNA,WAAW,EAIxBoB,MAAM,EAC/BA,MAAM;AAAA;AAAA,KAb9BU,IAAI;AAAA;AAmiBV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}