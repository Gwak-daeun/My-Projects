{"ast":null,"code":"var __jsx = React.createElement;\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\nimport Router from \"next/router\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { END } from \"redux-saga\";\nimport AppLayout from \"../../components/AppLayout\";\nimport { LOAD_HASHTAG_POSTS_REQUEST } from \"../../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\nimport wrapper from '../../store/configureStore';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\nimport styled from 'styled-components';\nimport Meta from \"antd/lib/card/Meta\";\nimport { Card, List } from \"antd\";\nconst OneHashtag = styled.div.withConfig({\n  displayName: \"tag__OneHashtag\",\n  componentId: \"sc-p2cvih-0\"\n})([\".h1{text-align:center;}.card1{width:170px;}.img1{height:250px;width:100%;}\"]);\nconst Hashtag = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    tag\n  } = router.query;\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadHashtagPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (!(me && me.id)) {\n      alert(\"로그인 후 이용 가능합니다.\");\n      Router.push('/');\n    }\n    const onScroll = () => {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadHashtagPostsLoading) {\n          dispatch({\n            type: LOAD_HASHTAG_POSTS_REQUEST,\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n            data: tag\n          });\n        }\n      }\n    };\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, tag]);\n  console.log(\"해시태그 메인포스트: \", mainPosts);\n  return __jsx(AppLayout, null, __jsx(OneHashtag, null, __jsx(\"h1\", {\n    className: \"h1\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: faMagnifyingGlass\n  }), \" Look with \\\"#\", tag, \"\\\" \"), __jsx(List, {\n    grid: {\n      gutter: 50,\n      column: 4\n    },\n    dataSource: mainPosts,\n    renderItem: items => {\n      var _items$Images$;\n      return __jsx(List.Item, null, __jsx(Card, {\n        className: \"card1\",\n        title: __jsx(\"a\", {\n          href: `http://localhost:3000/post/${items.id}`\n        }, items.lookName),\n        cover: __jsx(\"a\", {\n          href: `http://localhost:3000/post/${items.id}`\n        }, __jsx(\"img\", {\n          className: \"img1\",\n          alt: \"example\",\n          src: `http://localhost:3065/${(_items$Images$ = items.Images[0]) === null || _items$Images$ === void 0 ? void 0 : _items$Images$.src}`\n        }))\n      }, __jsx(Meta, {\n        description: '#' + items.Hashtags[0].name + \" 가 포함된 Look\"\n      })));\n    }\n  })));\n};\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context);\n  const cookie = context.req ? context.req.headers.cookie : '';\n  console.log(context);\n  axios.defaults.headers.Cookie = '';\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: context.params.tag\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  return {\n    props: {}\n  };\n});\nexport default Hashtag;","map":null,"metadata":{},"sourceType":"module"}