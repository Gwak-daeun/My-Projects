{"ast":null,"code":"var __jsx = React.createElement;\nimport { Card, List } from \"antd\";\nimport axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { END } from \"redux-saga\";\nimport { LOAD_POSTS_REQUEST } from \"../../reducers/post\";\nimport wrapper from \"../../store/configureStore\";\nimport AppLayout from \"../../components/AppLayout\";\nimport styled from \"styled-components\";\nconst OneAllPosts = styled.div.withConfig({\n  displayName: \"allPosts__OneAllPosts\",\n  componentId: \"sc-iknx75-0\"\n})([\".card1{width:170px;}.img1{height:250px;width:100%;}\"]);\nconst AllPosts = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (!(me && me.id)) {\n      alert(\"로그인 후 이용 가능합니다.\");\n      Router.push('/');\n    }\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading, me && me.id]);\n  console.log(\"메인포스트: \", mainPosts);\n  return __jsx(AppLayout, null, __jsx(OneAllPosts, null, __jsx(List, {\n    grid: {\n      gutter: 50,\n      column: 4\n    },\n    dataSource: mainPosts,\n    renderItem: items => {\n      var _items$Images$;\n      return __jsx(List.Item, null, __jsx(Card, {\n        className: \"card1\",\n        title: __jsx(\"a\", {\n          href: `http://localhost:3000/post/${items.id}`\n        }, items.lookName),\n        cover: __jsx(\"a\", {\n          href: `http://localhost:3000/post/${items.id}`\n        }, __jsx(\"img\", {\n          className: \"img1\",\n          alt: \"example\",\n          src: `http://localhost:3065/${items === null || items === void 0 ? void 0 : (_items$Images$ = items.Images[0]) === null || _items$Images$ === void 0 ? void 0 : _items$Images$.src}`\n        }))\n      }));\n    }\n  })));\n};\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default AllPosts;","map":null,"metadata":{},"sourceType":"module"}